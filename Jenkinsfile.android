@Library('conservify') _

conservifyProperties([ disableConcurrentBuilds() ])

timestamps {
    node ("jenkins-aws-ubuntu") {
        try {
            stage ('git') {
                checkout scm
            }

			stage ("android-sdk") {
				sh "rm -rf android-sdk"
				sh "rm -f android-sdk-setup.sh*"
				sh "wget https://raw.githubusercontent.com/conservify/dev-ops/main/android-sdk/android-sdk-setup.sh"
				sh "bash android-sdk-setup.sh"
			}

            stage ("configuration") {
                withCredentials([file(credentialsId: 'app-android-signing-data', variable: 'APP_ANDROID_SIGNING_DATA')]) {
                    sh "mkdir -p private && cp -f $APP_ANDROID_SIGNING_DATA private/private.zip && (cd private && unzip -o private.zip)"
                }
                withCredentials([file(credentialsId: 'app-android-google-services', variable: 'APP_ANDROID_GOOGLE_SERVICES')]) {
                    sh "cp -f $APP_ANDROID_GOOGLE_SERVICES app/App_Resources/Android"
				}
                withCredentials([file(credentialsId: 'nativescript-sqlite-commercial', variable: 'APP_NATIVESCRIPT_SQLITE')]) {
                    sh "cp -f $APP_NATIVESCRIPT_SQLITE ."
                    sh "unzip -o $APP_NATIVESCRIPT_SQLITE"
				}
            }

            stage ('build') {
                def props = readProperties(file: "private/gradle.properties")
                sh """
pwd

export PATH=$PATH:node_modules/.bin
export ANDROID_HOME=`pwd`/android-sdk
export FK_APP_RELEASE_STORE_FILE=private/${props.FK_APP_RELEASE_STORE_FILE}
export FK_APP_RELEASE_KEY_ALIAS=${props.FK_APP_RELEASE_KEY_ALIAS}
set +x
export FK_APP_RELEASE_STORE_PASSWORD=${props.FK_APP_RELEASE_STORE_PASSWORD}
export FK_APP_RELEASE_KEY_PASSWORD=${props.FK_APP_RELEASE_KEY_PASSWORD}
set -x
env

find . -name google-services.json
make clean-secrets
make android-release
"""
            }

            stage ('archive') {
                archiveArtifacts artifacts: 'platforms/android/app/build/outputs/apk/release/*.apk, platforms/android/app/build/outputs/bundle/release/*.aab'
            }

            notifySuccess()
        }
        catch (Exception e) {
            notifyFailure()
            throw e;
        }
    }

    refreshDistribution()
}
